system:
  _target_: src.system.ComposedSystem
  sys_left:
    _target_: src.system.Portfolio
    dim_state: ${common.number_of_stocks}
    action_bounds: ${common.action_bounds_left}
  sys_right:
    _target_: src.system.MarketAttack
    dim_state: ${common.number_of_stocks}
    action_bounds: ${common.action_bounds_right}
  output_mode: both
  io_mapping: ${get:\[\]}
policy:
  _target_: src.policy.JointPolicyVPG
  pedestrian_model:
    _target_: regelum.model.PerceptronWithTruncatedNormalNoise
    dim_input: ${get:${common.number_of_stocks} * 2}
    dim_output: ${common.number_of_stocks}
    dim_hidden: 40
    n_hidden_layers: 3
    hidden_activation:
      _target_: torch.nn.Tanh
    output_bounds: ${common.action_bounds_left}
    is_truncated_to_output_bounds: True\,
    output_activation:
      _target_: regelum.model.MultiplyByConstant
      constant: 0.1
    stds: ${get:\[0.05\]*\(${common.number_of_stocks}\)}
  chauffeur_model:
    _target_: regelum.model.PerceptronWithTruncatedNormalNoise
    dim_input: ${get:${common.number_of_stocks} * 2}
    dim_output: ${get:${common.number_of_stocks} * \( ${common.number_of_stocks} +
      3 \) // 2}
    dim_hidden: 40
    n_hidden_layers: 3
    hidden_activation:
      _target_: torch.nn.Tanh
    output_bounds: ${common.action_bounds_right}
    is_truncated_to_output_bounds: True\,
    output_activation:
      _target_: regelum.model.MultiplyByConstant
      constant: 0.1
    stds: ${get:\[0.05\]*\( ${common.number_of_stocks} * \( ${common.number_of_stocks}
      + 3 \) // 2 \)}
  pedestrian_critic: ${same:pedestrian_critic}
  chauffeur_critic: ${same:chauffeur_critic}
  system: ${same:system}
  is_normalize_advantages: true
  gae_lambda: 0.95
  N_episodes: 3
  sampling_time: ${common.sampling_time}
simulator:
  _target_: src.simulator.Simulator
  system: ${same:system}
  state_init: ${get:regelum.utils.rg.array\(\[1.0\]*\(${common.number_of_stocks}*2\)\).reshape\(1\,
    -1\)}
  time_final: 7
  max_step: ${common.sampling_time}
scenario:
  _target_: src.scenario.GameScenario
  policy: ${same:policy}
  pedestrian_critic: ${same:pedestrian_critic}
  chauffeur_critic: ${same:chauffeur_critic}
  simulator: ${same:simulator}
  pedestrian_running_objective_model:
    _target_: src.objective.PedestrianRunningObjectiveModel
    weights: ${get:regelum.utils.rg.array\(\[10\]* \(${common.number_of_stocks} *
      \( ${common.number_of_stocks} + 5 \) // 2  + 1\)\)}
  chauffeur_running_objective_model:
    _target_: src.objective.ChauffeurRunningObjectiveModel
    weights: ${get:regelum.utils.rg.array\(\[10\]* \(${common.number_of_stocks} *
      \( ${common.number_of_stocks} + 5 \) // 2  + 1\)\)}
  discount_factor: ${common.discount_factor}
  sampling_time: ${common.sampling_time}
  N_iterations: 5
  iters_to_switch_opt_agent: 10
common:
  sampling_time: 0.05
  number_of_stocks: 4
  discount_factor: 0.95
  action_bounds_left: ${get:\[\[-1\, 1\]\]*${common.number_of_stocks}}
  action_bounds_right: ${get:\[\[0.05\, 0.1\]\]* \(${common.number_of_stocks} * \(
    ${common.number_of_stocks} + 3 \) // 2\)}
pedestrian_critic:
  _target_: src.critic.Critic
  system_dim_observation: ${common.number_of_stocks}
  system_dim_inputs: ${common.number_of_stocks}
  model:
    _target_: regelum.model.ModelPerceptron
    dim_input: ${get:${common.number_of_stocks} * 2}
    dim_output: 1
    dim_hidden: 40
    n_hidden_layers: 3
    hidden_activation:
      _target_: torch.nn.Tanh
  td_n: 2
  is_value_function: true
  is_on_policy: true
  optimizer_config:
    _target_: regelum.optimizable.core.configs.TorchOptimizerConfig
    n_epochs: 20
    data_buffer_iter_bathes_kwargs:
      batch_sampler: regelum.data_buffers.batch_sampler.RollingBatchSampler
      dtype: torch.FloatTensor
      mode: full
      n_batches: 1
      device: cpu
    opt_method_kwargs:
      lr: 0.001
  discount_factor: ${common.discount_factor}
chauffeur_critic:
  _target_: src.critic.Critic
  system_dim_observation: ${common.number_of_stocks}
  system_dim_inputs: ${get:${common.number_of_stocks} * \( ${common.number_of_stocks}
    + 3 \) // 2}
  model:
    _target_: regelum.model.ModelPerceptron
    dim_input: ${get:${common.number_of_stocks} *2}
    dim_output: 1
    dim_hidden: 40
    n_hidden_layers: 3
    hidden_activation:
      _target_: torch.nn.Tanh
  td_n: 2
  is_value_function: true
  is_on_policy: true
  optimizer_config:
    _target_: regelum.optimizable.core.configs.TorchOptimizerConfig
    n_epochs: 20
    data_buffer_iter_bathes_kwargs:
      batch_sampler: regelum.data_buffers.batch_sampler.RollingBatchSampler
      dtype: torch.FloatTensor
      mode: full
      n_batches: 1
      device: cpu
    opt_method_kwargs:
      lr: 0.001
  discount_factor: ${common.discount_factor}
callbacks:
- src.callback.SwitchAgentCallback
- src.callback.DoubleAgentStepLogger
- src.callback.WhichOptimizeCallback
